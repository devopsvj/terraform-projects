terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "~> 2.11.0"
    }
  }
  // backend "local" {
  //   path = "./tfstate/tf-project-2.tfstate"
  // }
}

provider "docker" {
  version = "~> 2.11.0"
  host    = "npipe:////.//pipe//docker_engine"
}

# First Docker Image Resource

resource "docker_image" "nodered_image" {
  name = "nodered/node-red:latest"
}

# First Random Resource

resource "random_string" "random" {
  count = 1
  length = 4
  special = false
  upper = false
}

# First Docker Resource

resource "docker_container" "nodered_container" {
  count = 1
  name  = join("-",["nodered", random_string.random[count.index].result])
  image = docker_image.nodered_image.latest
  ports {
    internal = 1880
    #external = 1880
  }
}

resource "docker_container" "nodered_container2" {
  name  = "nodered-abcd"
  image = docker_image.nodered_image.latest
}

# docker inspect --format="{{.ID}}" nodered-abcd
# terraform import docker_container.nodered_container2 $(docker inspect --format="{{.ID}}" nodered-abcd)
# output 

output "container-name" {
  value = docker_container.nodered_container[*].name
  description = "The Name of the container"
}

output "container1-ip-port" {
  value = [for i in docker_container.nodered_container[*]: join(":", [i.ip_address],i.ports[*]["external"])]
  description = "The IP address and external port of the container"
}

// output "container1-ip-port" {
//   value = join(":",[docker_container.nodered_container[0].ip_address,docker_container.nodered_container[0].ports[0].external])
//   description = "The IP address and external port of the container"
// }